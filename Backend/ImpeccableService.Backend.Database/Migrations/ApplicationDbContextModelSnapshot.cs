// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace ImpeccableService.Backend.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ImpeccableService.Backend.Database.Offering.Model.MenuEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("VenueId")
                        .HasColumnName("venue_id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_menu");

                    b.ToTable("menu");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.Offering.Model.MenuItemEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("MenuSectionId")
                        .HasColumnName("menu_section_id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ThumbnailImageSerialized")
                        .HasColumnName("thumbnail_image_serialized")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_menu_item");

                    b.HasIndex("SectionId")
                        .HasName("ix_menu_item_section_id");

                    b.ToTable("menu_item");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.Offering.Model.MenuSectionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("MenuId")
                        .HasColumnName("menu_id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_menu_section");

                    b.HasIndex("MenuId")
                        .HasName("ix_menu_section_menu_id");

                    b.ToTable("menu_section");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.Offering.Model.VenueEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyId")
                        .HasColumnName("company_id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_venue");

                    b.HasIndex("CompanyId")
                        .HasName("ix_venue_company_id");

                    b.ToTable("venue");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.UserManagement.Model.CompanyEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_company");

                    b.HasIndex("OwnerId")
                        .HasName("ix_company_owner_id");

                    b.ToTable("company");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.UserManagement.Model.SessionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AccessToken")
                        .HasColumnName("access_token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LogoutToken")
                        .HasColumnName("logout_token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RefreshToken")
                        .HasColumnName("refresh_token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_session");

                    b.HasIndex("UserId")
                        .HasName("ix_session_user_id");

                    b.ToTable("session");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.UserManagement.Model.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfileImageSerialized")
                        .HasColumnName("profile_image_serialized")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Role")
                        .HasColumnName("role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.Offering.Model.MenuItemEntity", b =>
                {
                    b.HasOne("ImpeccableService.Backend.Database.Offering.Model.MenuSectionEntity", "Section")
                        .WithMany("Items")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("fk_menu_item_menu_section_section_id");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.Offering.Model.MenuSectionEntity", b =>
                {
                    b.HasOne("ImpeccableService.Backend.Database.Offering.Model.MenuEntity", "Menu")
                        .WithMany("Sections")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("fk_menu_section_menu_menu_id");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.Offering.Model.VenueEntity", b =>
                {
                    b.HasOne("ImpeccableService.Backend.Database.UserManagement.Model.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_venue_company_company_id");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.UserManagement.Model.CompanyEntity", b =>
                {
                    b.HasOne("ImpeccableService.Backend.Database.UserManagement.Model.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_company_user_owner_id");
                });

            modelBuilder.Entity("ImpeccableService.Backend.Database.UserManagement.Model.SessionEntity", b =>
                {
                    b.HasOne("ImpeccableService.Backend.Database.UserManagement.Model.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_session_user_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
